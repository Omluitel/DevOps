Vagrant is a tool for managing and provisioning virtualized development environments. It simplifies the process of setting up and managing virtual machines (VMs) for development purposes. 

Here are some useful Vagrant commands:

vagrant init: Initializes a new Vagrant project in the current directory, creating a Vagrantfile that you can configure for your VM.
Example: vagrant init ubuntu/bionic64 #Boxes Source: https://app.vagrantup.com/boxes/search?page=2&provider=&q=ubuntu&sort=updated&utf8=%E2%9C%93

vagrant up: Creates and starts the virtual machine(s) defined in the Vagrantfile. If the VM doesn't exist, it will be created. If it's already
Example: vagrant up

vagrant halt: Stops the running virtual machine(s) gracefully. This is similar to shutting down a computer.
Example: vagrant halt

vagrant ssh: Opens an SSH session to the default or specified virtual machine. This allows you to interact with the VM's terminal.
Example: vagrant ssh

vagrant reload: This command restarts the virtual machine, applying any changes made to the Vagrantfile.
Example: vagrant reload

vagrant box list: Lists all available Vagrant boxes (base images) that you can use to create VMs.
Example: vagrant box list

vagrant status: Displays the status of all defined virtual machines, whether they're running, halted, suspended, etc.
Example: vagrant status

vagrant provision: Forces the provisioning scripts specified in the Vagrantfile to run on the VM without recreating it. Useful when you want to apply configuration changes without restarting the VM.
Example: vagrant provision

vagrant box remove: Removes a Vagrant box from your local box repository.
Example: vagrant box remove

vagrant plugin install: Installs Vagrant plugins that provide additional functionality, such as new providers or provisioners.
Example: vagrant plugin install vagrant-vbguest --> This command installs the "vagrant-vbguest" plugin, which helps maintain the VirtualBox Guest Additions in the VM.


